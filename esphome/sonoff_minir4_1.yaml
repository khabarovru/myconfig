substitutions:
  board_name: Sonoff_MINIR4_Kiosk_Charger
  host_name: sonoff-mini-r4-kiosk-charger

esphome:
  name: ${host_name}
  comment: Sonoff MiniR4 Wallpanel Charger 
  on_boot:
    priority: -10
    then:
    # on affter boot
    - switch.turn_on: relay

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  #domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #use_address: 192.168.1.164
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.117
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

http_request:
  id: http_request_data

logger:

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

output:
  - platform: gpio
    id: manual_status_led
    pin: 
      number: GPIO19
      inverted: true

light:
  - platform: binary
    name: ${board_name}_Status_LED
    internal: true
    output: manual_status_led
    id: wifi_led

number:
  - platform: template
    name: ${board_name}_MaxLevel
    icon: mdi:arrow-collapse-up
    id: id_max_level
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true

  - platform: template
    name: ${board_name}_MinLevel
    icon: mdi:arrow-collapse-down
    id: id_min_level
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    name: ${board_name}_Button
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    # on_press:
    #   - switch.toggle: 
    #       id: relay

  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_auto_mode
    id: id_auto_mode

  # - platform: homeassistant
  #   name: ${board_name}_tod
  #   id: id_tod
  #   entity_id: binary_sensor.tod_day
  #   internal: false
  #   publish_initial_state: true

  - platform: template
    name: ${board_name}_ToD
    id: id_tod
    icon: mdi:chart-timeline

  - platform: homeassistant
    name: ${board_name}_security
    entity_id: input_boolean.system_security_mode
    id: id_security
    internal: false
    publish_initial_state: true

switch:
  - platform: gpio
    name: ${board_name}_Relay
    pin: GPIO26
    id: relay

  - platform: template
    name: ${board_name}_always_on
    optimistic: true
    id: id_always_on
    on_turn_on:
      - binary_sensor.template.publish:
          id: id_auto_mode
          state: OFF
    on_turn_off:
      - binary_sensor.template.publish:
          id: id_auto_mode
          state: OFF    

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: homeassistant
    name: ${board_name}_people
    entity_id: sensor.people_home
    id: id_people_home
    internal: false

  - platform: template
    name: ${board_name}_Battery_Level
    id: id_battery
    device_class: battery
    unit_of_measurement: '%'
    on_value:
      - if:
          condition:
              - binary_sensor.is_on: id_auto_mode
          then:
            - if:
                condition:
                  and:
                    - lambda: "return id(id_battery).state <= id(id_min_level).state;"
                    - switch.is_off: relay
                then:
                  - switch.turn_on: relay
                else:
                  - if:
                      condition:
                        and:
                          - lambda: "return id(id_battery).state >= id(id_max_level).state ;"
                          - switch.is_on: relay
                      then:
                        - switch.turn_off: relay
          else:
            - if: 
                condition:
                  - switch.is_off: relay
                then:
                  - switch.turn_on: relay

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

interval:
  - interval: 15s
    then:
      - if:
          condition:
            and:
              - not:
                  - binary_sensor.is_on: id_security
              - or:
                  - not:
                      - binary_sensor.is_on: id_tod
                  - switch.is_on: id_always_on
          then:
            - binary_sensor.template.publish:
                id: id_auto_mode
                state: OFF
          else:
            - binary_sensor.template.publish:
                id: id_auto_mode
                state: ON

  - interval: 1min
    then:
      - http_request.get:
          url: !secret kiosk_url
          headers:
            Content-Type: application/json
          verify_ssl: false
          on_response:
            then:
              - lambda: |-
                  json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                      id(id_battery).publish_state(root["batteryLevel"]);
                  });
      - if:
          condition:
              - lambda: "return id(id_min_level).state <= 20;"
          then:
            - number.set:
                id: id_min_level
                value: 25
      - if:
          condition:
              - lambda: "return id(id_max_level).state <= 50;"
          then:
            - number.set:
                id: id_max_level
                value: 80


  - interval: 30s
    then:
      - if:
          condition:
            or:
              - lambda: |-
                  return id(sntp_time).now().hour >= 21;
              - lambda: |-
                  return (id(sntp_time).now().hour >= 0 && id(sntp_time).now().hour < 7) ;
          then:
            - binary_sensor.template.publish:
                id: id_tod
                state: OFF
          else:
            - binary_sensor.template.publish:
                id: id_tod
                state: ON