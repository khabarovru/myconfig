  # fade_volume:
  #   alias: Fade the volume of a media player
  #   mode: restart
  #   # User-defined inputs to use.
  #   fields:
  #     target_player:
  #       name: Target media player
  #       description: "Target media player of volume fade."
  #       required: true
  #       example: media_player.yandex_hb
  #       selector:
  #         entity:
  #           domain: media_player
  #     target_volume:
  #       name: Target volume
  #       description: "Volume the media play will be at the end of the fade duration."
  #       required: true
  #       default: 0.5
  #       example: '0.5'
  #       selector:
  #         number:
  #           max: 1.0
  #           min: 0.0
  #           step: 0.01
  #           mode: slider
  #     duration:
  #       name: Fade duration
  #       description: "Length of time in seconds the fade should take."
  #       required: true
  #       default: 5
  #       example: '5'
  #       selector:
  #         number:
  #           min: 1
  #           max: 10000
  #           mode: box
  #           unit_of_measurement: "s"
  #     curve:
  #       name: Fade curve algorithm
  #       description: "Shape of the fade curve to apply."
  #       required: true
  #       default: 'logarithmic'
  #       example: 'logarithmic'
  #       selector:
  #         select:
  #           options:
  #             - logarithmic
  #             - bezier
  #             - linear
  #   variables:
  #     # Hard-coded temporal granularlity.
  #     steps_per_second: 10
  #     # An integer denoting the total steps required to fade based on the user-defined duration and steps per second.
  #     total_steps: "{{ (steps_per_second * duration) | int(0) }}"
  #     # Define the difference between start point and target, used to scale each fade step.
  #     start_volume: "{{ state_attr(target_player, 'volume_level') | float(0) }}"
  #     start_diff: "{{ (target_volume - start_volume) | float(0) }}"
  #   sequence:
  #     - repeat:
  #         # Only continue if the following conditions are true:
  #         while:
  #             # Pre-calculated total step index has not been reached.
  #           - condition: template
  #             value_template: "{{ repeat.index < total_steps }}"
  #             # Media player's current volume is not close to the target, otherwise we're just wasting processing time.
  #           - condition: template
  #             value_template: "{{ ( ( state_attr(target_player, 'volume_level') - target_volume) | abs) > 0.001 }}"
  #         sequence:
  #           - service: media_player.volume_set
  #             data_template:
  #               entity_id: '{{ target_player }}'
  #               # Defines x as the normalised time over the duration based on the repeat index.
  #               # Then applies the fade curve on each step, multiplied by the difference factor.
  #               volume_level: >
  #                 {% set t = repeat.index / total_steps %}
  #                 {% if curve == 'logarithmic' %}
  #                   {{ (start_volume + (t / (1 + (1 - t))) * start_diff) | float(0) }}
  #                 {% elif curve == 'bezier' %}
  #                   {{ (start_volume + (t * t * (3 - 2 * t)) * start_diff) | float(0) }}
  #                 {% else %}
  #                   {{ (start_volume + t * start_diff) | float(0) }}
  #                 {% endif %}
  #           # Pause to limit the update rate.
  #           # Apparently HA has issues with sub-second accuracy, so 100ms will have to do.
  #           - delay: '00:00:00.1'
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: '{{ target_player }}'
  #         volume_level: '{{ target_volume }}'
          
          

  # group_set:
  #   alias: Create groups with enhanced include/exclude statements
  #   sequence:
  #   - service: group.set
  #     data_template:
  #       object_id:  "{{ object_id if object_id != null else name      | regex_replace('[^a-z0-9]', '_', True) | lower }}"
  #       name:       "{{ name      if name      != null else object_id }}"
  #       icon:       "{{ icon      if icon      != null else ''        }}"
  #       all:        "{{ all       if all       != null else False     }}"
  #       entities: >-
  #         {# ENTITIES #}
  #         {% set ns = namespace(entities =
  #                         ([] if entities == null else entities.split( ',' ) if entities is string else entities or [])) %}
  #         {# TYPES #}
  #         {% for type in  ([] if types    == null else types.split   ( ',' ) if types    is string else types    or [])  %}
  #         {% set ns.entities      = ns.entities +              (expand(states[type]) | map(attribute="entity_id")  | list) %}
  #         {% endfor %}
  #         {# INCLUDE #}
  #         {% for group in ([] if include  == null else include.split ( ',' ) if include  is string else include  or [])  %}
  #         {%-   if expand_groups == True -%}
  #         {%-     set ns.entities = ns.entities +              (expand(states[group])| map(attribute="entity_id")  | list)%}
  #         {%-   else -%}
  #         {%-     set ns.entities = ns.entities +              states[group].attributes.entity_id                  | list -%}
  #         {%-   endif -%}
  #         {% endfor %}
  #         {# EXCLUDE #}
  #         {% for group in ([] if exclude  == null else exclude.split ( ',' ) if exclude  is string else exclude  or [])  %}
  #         {%-   if expand_groups == True -%}
  #         {%-     set ns.entities = ns.entities | reject('in', (expand(states[group])| map(attribute="entity_id")) | list)%}
  #         {%-   else -%}
  #         {%-     set ns.entities = ns.entities | reject('in', states[group].attributes.entity_id                ) | list -%}
  #         {%-   endif -%}
  #         {% endfor %}
  #         {# OUTPUT #}
  #         {{ ns.entities | join (',') }}

  # delete_entity_history_status:
  #   alias: удаление истории объектов
  #   sequence:
  #     - service: python_script.exec
  #       data:
  #         cache: false
  #         d_entity: '{{d_entity}}'
  #         d_text: '{{d_text}}'
  #         d_day: '{{d_day}}'
  #         d_del_attr: '{{d_del_attr}}'
  #         file: /config/python_scripts/delete_entity_history.py
  #     - choose:
  #         - conditions:
  #             - condition: state
  #               entity_id: input_text.delete_entity_history_status
  #               state: running
  #           sequence:
  #             - wait_for_trigger:
  #                 - platform: state
  #                   from: running
  #                   entity_id: input_text.delete_entity_history_status
  #               timeout: '06:00:00'
  #       default: []
  #   mode: queued
  #   variables:
  #     d_entity: '{{d_entity|default(0)}}'
  #     d_text: '{{d_text|default(0)}}'
  #     d_day: '{{d_day|default(30)}}'
  #     d_del_attr: '{{d_del_attr|default(False)}}'
  #   fields:
  #     d_entity:
  #       description: Объекты для удаления
  #       required: false
  #       selector:
  #         target: null
  #     d_text:
  #       description: Совпадения имен
  #       required: false
  #       selector:
  #         object: null
  #     d_day:
  #       description: Старше скольки дней
  #       required: false
  #       default: 44
  #       selector:
  #         number:
  #           min: 0
  #           max: 100
  #           unit_of_measurement: дней
  #           mode: slider
  #     d_del_attr:
  #       description: Удалять атрибуты
  #       required: false
  #       default: false
  #       selector:
  #         boolean: null          