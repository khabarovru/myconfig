  # tts_test:
  #   alias: Test TTS
  #   sequence:
  #     # - service: media_player.volume_set
  #     #   data:
  #     #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
  #     #     volume_level: '{{states("input_number.main_volume")|float(0)}}'
  #     # - service: tts.yandextts_say
  #     #   data:
  #     #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
  #     #     message: "Проверка звука!"
  #   - service: media_player.volume_set
  #     data:
  #       entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
  #       volume_level: '{{states("input_number.main_volume")|float(0)}}'
  #   - service: media_player.play_media
  #     data:
  #       media_content_type: dialog
  #       entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
  #       media_content_id: "Проверка звука!"

  # text_to_tts:
  #   alias: Text To TTS
  #   sequence:
  #     - choose:
  #         - conditions: 
  #             - condition: state
  #               entity_id: input_select.tts_audio_mode
  #               state: 'Текст'
  #           sequence:
  #             - service: media_player.play_media
  #               data:
  #                 media_content_type: dialog
  #                 entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
  #                 media_content_id: >-
  #                   {%- if states('sensor.tts_audio_effect') != 'none' %}<speaker effect="{{states('sensor.tts_audio_effect')}}">{%endif%}{{ states('input_text.text_to_tts') }}
  #                 extra:
  #                   volume_level: '{{states("input_number.tts_volume")|float(0)}}'
  #         - conditions: 
  #             - condition: state
  #               entity_id: input_select.tts_audio_mode
  #               state: 'Команда'
  #           sequence:
  #             - service: media_player.play_media
  #               data:
  #                 media_content_type: command
  #                 entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
  #                 media_content_id: "{{ states('input_text.text_to_tts') }}"
  #                 extra:
  #                   volume_level: '{{states("input_number.tts_volume")|float(0)}}'
  #         - conditions:
  #             - condition: state
  #               entity_id: input_select.tts_audio_mode
  #               state: 'Вопрос'
  #           sequence:
  #             - service: input_number.set_value
  #               data:
  #                 entity_id: input_number.temp_volume
  #                 value: >
  #                   {% set ent_id = 'media_player.' + states('input_select.tts_audio_out')|lower %}
  #                   {% set vol = state_attr(ent_id,'volume_level') %}
  #                   {{ vol }}
  #             - service: input_number.set_value
  #               data:
  #                 entity_id: input_number.tts_volume
  #                 value: 0
  #             - service: media_player.volume_set
  #               data:
  #                 entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
  #                 volume_level: '{{states("input_number.tts_volume")|float(0)}}'
  #             - service: media_player.play_media
  #               data:
  #                 entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
  #                 media_content_id: "{{ states('input_text.text_to_tts') }}"
  #                 media_content_type: "question:tts_reply"
  #             - delay:
  #                 seconds: 1
  #             - wait_template: >
  #                 {% set ent_id = 'sensor.' + states('input_select.tts_audio_out')|lower + '_alice_state' %}
  #                 {{ is_state(ent_id,'idle') }}
  #             - delay:
  #                 seconds: 1
  #             - service: input_number.set_value
  #               data:
  #                 entity_id: input_number.tts_volume
  #                 value: '{{states("input_number.temp_volume")|float(0)}}'
  #             - service: media_player.volume_set
  #               data:
  #                 entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
  #                 volume_level: '{{states("input_number.tts_volume")|float(0)}}'


  # alice_question:
  #   alias: Question to Alice
  #   sequence:
  #     - service: media_player.play_media
  #       entity_id: media_player.yandex_k
  #       data:
  #         media_content_id: "{{ trigger.event.data.text }}"
  #         media_content_type: "question:{{ trigger.event.data.chat_id }}"
  #     - wait_for_trigger:
  #         platform: event
  #         event_type: yandex_station_response
  #     - service: input_text.set_value
  #       entity_id: input_text.tts_to_text
  #       data:
  #         value: "{{ trigger.event.data.text }}"


  # tts_out:
  #   alias: TTS Out script
  #   mode: parallel
  #   max: 100
  #   max_exceeded: silent
  #   fields:
  #     entity:
  #       description: 'entity_id колонки'
  #       example: 'media_player.yandex_hb'
  #       default: media_player.{{states('input_select.tts_audio_out')|lower}}
  #     text:
  #       description: 'Текст для воспроизведения'
  #       example: 'Внимание! Важное сообщение...'
  #     vol_level:
  #       description: 'Уровень громкости'
  #       example: '0.8'
  #       default: "{{states('input_number.tts_volume')|float(0)}}"
  #   sequence:
  #      - service: media_player.play_media
  #        data:
  #          entity_id: '{{ entity }}'
  #          media_content_id: '{{ text }}'
  #          media_content_type: text
  #          extra:
  #            volume_level: '{{ vol_level }}'