# # #####################################################################################
# #
# # VOVA - Lights
# #
# # #####################################################################################
# # Vova- breather auto co2
# # ################################## 
#   - alias: vova_breather_auto_co2
#     id: vova_breather_auto_co2
#     initial_state: true
#     trigger:
#       - platform: time_pattern
#         minutes: '/3'
#     condition:
#       - condition: state
#         entity_id: switch.system_breather_auto_v
#         state: 'on'
#       - condition: not
#         conditions:
#           - condition: state
#             entity_id: switch.system_breather_v_last_toggle_by_user
#             state: 'on'
#     action:
#       - choose:
#           - conditions:
#               - condition: state
#                 entity_id: binary_sensor.0x00158d00022ccffe_contact
#                 state: 'off'
#               - condition: numeric_state
#                 entity_id: sensor.esp32_node_v_co2
#                 above: input_number.co2_high_limit
#               - condition: state
#                 entity_id: binary_sensor.breather_v
#                 state: 'off'
#               - condition: state
#                 entity_id: input_boolean.system_security_mode
#                 state: 'off'
#             sequence:
#               - service: fan.turn_on
#                 entity_id: fan.breather_v
#               - condition: numeric_state
#                 entity_id: sensor.esp32_node_v_co2
#                 above: input_number.co2_high_limit
#               - condition: state
#                 entity_id: switch.system_breather_auto_speed_v
#                 state: 'on'
#               - service: fan.set_percentage
#                 entity_id: fan.breather_v
#                 data:
#                   percentage: "{{states('sensor.breather_set_speed_v')|int(0) }}"

#           - conditions:
#               - condition: state
#                 entity_id: binary_sensor.0x00158d00022ccffe_contact
#                 state: 'off'
#               - condition: numeric_state
#                 entity_id: sensor.esp32_node_v_co2
#                 above: input_number.co2_high_limit
#               - condition: state
#                 entity_id: binary_sensor.breather_v
#                 state: 'on'
#               - condition: state
#                 entity_id: input_boolean.system_security_mode
#                 state: 'off'
#               - condition: state
#                 entity_id: switch.system_breather_auto_speed_v
#                 state: 'on'
#               - condition: numeric_state
#                 entity_id: sensor.breather_set_speed_v
#                 above: 0
#             sequence:
#               - service: fan.set_percentage
#                 entity_id: fan.breather_v
#                 data:
#                   percentage: "{{states('sensor.breather_set_speed_v')|int(0) }}"

#           - conditions:
#               - condition: state
#                 entity_id: binary_sensor.0x00158d00022ccffe_contact
#                 state: 'off'
#               - condition: numeric_state
#                 entity_id: sensor.esp32_node_v_co2
#                 below: input_number.co2_low_limit
#               - condition: state
#                 entity_id: binary_sensor.breather_v
#                 state: 'on'
#             sequence:
#               - service: fan.turn_off
#                 entity_id: fan.breather_v
                
#           - conditions:
#               - condition: state
#                 entity_id: binary_sensor.0x00158d00022ccffe_contact
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.breather_v
#                 state: 'on'
#             sequence:
#               - service: fan.turn_off
#                 entity_id: fan.breather_v

# # ##################################
# # Vova - Breather Auto Timer
# # ##################################
#   - alias: vova_breather_auto_timer
#     id: vova_breather_auto_timer
#     initial_state: true
#     trigger:
#       # - platform: time_pattern
#       #   minutes: "/5"
#       #   id: 'time_pattern' 
#       # - platform: event
#       #   event_type: timer.finished
#       #   event_data:
#       #     entity_id: timer.breather_v
#       #   id: 'timer_finish'
#       # - platform: state
#       #   entity_id: binary_sensor.breather_v
#       #   from: 'off'
#       #   to: 'on'
#       #   id: 'to_on'
#       # - platform: state
#       #   entity_id: binary_sensor.breather_v
#       #   from: 'on'
#       #   to: 'off'
#       #   id: 'to_off'
#       - platform: state
#         entity_id: binary_sensor.digma_ir_v_breather_remote_used
#         to: 'on'
#         id: 'ir_used_remote'
#       # - platform: state
#       #   entity_id: binary_sensor.digma_ir_v_breather_self_code
#       #   to: 'on'
#       #   id: 'ir_used_digma'
#       # - platform: state
#       #   entity_id: input_select.breazer_timer
#       #   to:
#       #   id: 'input'
#       - platform: event
#         event_type: yandex_intent
#         event_data:
#           text: Выключи вентиляцию
#         id: 'to_off_alice'
#       - platform: event
#         event_type: yandex_intent
#         event_data:
#           text: Включи вентиляцию
#         id: 'to_on_alice'
#       - platform: time
#         at: "21:00:00"
#         id: 'time_trigger_night'
#       - platform: time
#         at: "08:00:00"
#         id: 'time_trigger_day'
#     condition:
#       # - condition: state
#       #   entity_id: switch.system_breather_auto_v
#       #   state: 'off'
#       - condition: template
#         value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
#     action:
#       - choose:
#           # - conditions: # choice 0
#           #     - condition: trigger
#           #       id: "time_pattern"
#           #   sequence:
#           #     - if:
#           #         - condition: state
#           #           entity_id: switch.system_hourly_mode_breather_v
#           #           state: 'on'
#           #         - condition: state
#           #           entity_id: fan.breather_v
#           #           state: 'off'
#           #         - condition: state
#           #           entity_id: switch.system_breather_auto_v
#           #           state: 'off'
#           #       then:
#           #         - service: fan.turn_on
#           #           entity_id: fan.breather_v
#           #     - if:
#           #         - condition: state
#           #           entity_id: switch.system_hourly_mode_breather_v
#           #           state: 'off'
#           #         - condition: state
#           #           entity_id: fan.breather_v
#           #           state: 'on'
#           #         - condition: state
#           #           entity_id: switch.system_breather_auto_v
#           #           state: 'off'
#           #       then:
#           #         - service: fan.turn_off
#           #           entity_id: fan.breather_v
#           #         - service: timer.cancel
#           #           entity_id: timer.breather_v
          
#           # - conditions: # choice 1
#           #     - condition: trigger
#           #       id: "to_on"
#           #   sequence:
#           #     - service: timer.start
#           #       entity_id: timer.breather_v
#           #       data:
#           #         duration: "{{states('input_select.breazer_timer')|int * 60 }}"
#           #     - service: switch.turn_on
#           #       entity_id: switch.system_hourly_mode_breather_v
          
#           # - conditions: # choice 2
#           #     - condition: trigger
#           #       id: "to_off"
#           #   sequence:
#           #     - service: timer.cancel
#           #       entity_id: timer.breather_v
#           #     - service: switch.turn_off
#           #       entity_id: switch.system_hourly_mode_breather_v
          
#           # - conditions: # choice 3
#           #     - condition: trigger
#           #       id: "timer_finish"
#           #   sequence:
#           #     - choose:
#           #         - conditions:
#           #             - condition: state
#           #               entity_id: binary_sensor.breather_v
#           #               state: 'on'
#           #           sequence:
#           #             - choose: 
#           #                 - conditions:
#           #                     - condition: numeric_state
#           #                       entity_id: sensor.0x00158d0001e58714_temperature
#           #                       below: 18
#           #                   sequence:
#           #                     - service: fan.turn_off
#           #                       entity_id: fan.breather_v
#           #                     - condition: state
#           #                       entity_id: switch.system_hourly_mode_breather_v
#           #                       state: 'on'
                
#           #                 - conditions:
#           #                     - condition: numeric_state
#           #                       entity_id: sensor.0x00158d0001e58714_temperature
#           #                       above: 18
#           #                     - condition: state
#           #                       entity_id: input_boolean.system_security_mode
#           #                       state: 'off'
#           #                   sequence:
#           #                     - service: fan.set_percentage
#           #                       entity_id: fan.breather_v
#           #                       data:
#           #                         percentage: >
#           #                           {% if state_attr('fan.breather_v','percentage')|int(0) > states('input_number.low_speed_for_timer_mode_breather_v')|int(0) %}
#           #                           {{states('input_number.low_speed_for_timer_mode_breather_v')|int(0)}}
#           #                           {% elif state_attr('fan.breather_v','percentage')|int(0) <= states('input_number.high_speed_for_timer_mode_breather_v')|int(0) %}
#           #                           {{states('input_number.high_speed_for_timer_mode_breather_v')|int(0)}}
#           #                           {% endif %}

#           #         - conditions:
#           #             - condition: state
#           #               entity_id: binary_sensor.breather_v
#           #               state: 'off'
#           #           sequence:
#           #             - if:
#           #                 - condition: state
#           #                   entity_id: switch.system_hourly_mode_breather_v
#           #                   state: 'on'
#           #                 - condition: state
#           #                   entity_id: input_boolean.system_security_mode
#           #                   state: 'off'  
#           #               then:
#           #                 - service: fan.set_percentage
#           #                   entity_id: fan.breather_v
#           #                   data:
#           #                     percentage: "{{states('input_number.high_speed_for_timer_mode_breather_v')|int(0) }}"
#           #     - service: timer.start
#           #       entity_id: timer.breather_v
#           #       data:
#           #         duration: "{{states('input_select.breazer_timer')|int * 60 }}"

#           # - conditions: # choice 4
#           #     - condition: trigger
#           #       id: "ir_used_remote"
#           #   sequence:
#           #     # - service: notify.telegram
#           #     #   data:
#           #     #     message: "remote used"
            
#           #     - condition: state
#           #       entity_id: binary_sensor.breather_v
#           #       state: 'on'

#           #     - condition: state
#           #       entity_id: timer.breather_v
#           #       state: 'active'

#           #     - service: timer.cancel
#           #       entity_id: timer.breather_v

#           #     - service: switch.turn_off
#           #       entity_id: switch.system_hourly_mode_breather_v

#           - conditions: # choice 5
#               - condition: trigger
#                 id: "to_off_alice"
#             sequence:
#               - condition: template
#                 value_template: "{{ trigger.event.data.entity_id == 'media_player.yandex_v' }}"

#               - if:
#                   - condition: state
#                     entity_id: binary_sensor.breather_v
#                     state: 'on'
#                 then:
#                   - service: fan.turn_off
#                     entity_id: fan.breather_v
                    
#               # - service: timer.cancel
#               #   entity_id: timer.breather_v

#               - service: switch.turn_on
#                 entity_id: switch.system_breather_auto_v

#           - conditions: # choice 6
#               - condition: trigger
#                 id: 'to_on_alice'
#             sequence:
#               - condition: template
#                 value_template: "{{ trigger.event.data.entity_id == 'media_player.yandex_v' }}"

#               - if:
#                   - condition: state
#                     entity_id: binary_sensor.breather_v
#                     state: 'off'
#                 then:
#                   - service: fan.turn_on
#                     entity_id: fan.breather_v
#                   - service: switch.turn_on
#                     entity_id: switch.system_breather_v_last_toggle_by_user
#                   # - service: timer.cancel
#                   #   entity_id: timer.breather_v
#                   # - service: switch.turn_on
#                   #   entity_id: switch.system_hourly_mode_breather_v

#           # - conditions: # choice 7
#           #     - condition: trigger
#           #       id: "input"
#           #   sequence:
#           #     - condition: state
#           #       entity_id: timer.breather_v
#           #       state: 'active'
#           #     - service: timer.start
#           #       entity_id: timer.breather_v
#           #       data:
#           #         duration: "{{states('input_select.breazer_timer')|int * 60 }}"
                  
#           - conditions: # choice 8
#               - condition: trigger
#                 id: "time_trigger_night"
#             sequence:
#               - service: switch.turn_on
#                 entity_id: switch.system_breather_v_last_toggle_by_user
#               - service: fan.set_percentage
#                 entity_id: fan.breather_v
#                 data:
#                   percentage: 50
#               # - service: timer.start
#               #   entity_id: timer.breather_v
#               #   data:
#               #     duration: "{{states('input_select.breazer_timer')|int * 60 }}"
#               # - service: fan.turn_on
#               #   entity_id: fan.breather_v
#               - service: fan.set_preset_mode
#                 data:
#                   entity_id: fan.purifier2s
#                   preset_mode: Favorite
                    
#           - conditions: # choice 9
#               - condition: trigger
#                 id: "time_trigger_day"
#             sequence:
#               - service: fan.turn_off
#                 entity_id: fan.breather_v
#               - service: timer.cancel
#                 entity_id: timer.breather_v
#               - service: switch.turn_on
#                 entity_id: switch.system_breather_auto_v
#               - service: fan.set_preset_mode
#                 data:
#                   entity_id: fan.purifier2s
#                   preset_mode: Silent

# # ##################################
# # Vova - Breather Plug Toggle
# # ##################################
#   - alias: vova_breather_plug_toggle
#     id: vova_breather_plug_toggle
#     initial_state: true
#     max_exceeded: silent
#     mode: queued
#     max: 10
#     trigger:
#       - platform: state
#         entity_id: switch.0x00158d000344998e_plug
#         to: 'off'
#         for:
#           seconds: 30
#     condition:
#       - condition: state
#         entity_id: input_boolean.system_security_mode
#         state: 'off'
#     action:
#       - service: switch.turn_on
#         entity_id: switch.0x00158d000344998e_plug

# # ##################################
# # Vova - Breather Switches Interlock
# # ##################################
#   - alias: vova_breather_switches_interlock
#     id: vova_breather_switches_interlock
#     trigger:
#       - platform: state
#         entity_id:
#           - switch.system_hourly_mode_breather_v
#           - switch.system_breather_auto_v
#           - switch.system_breather_v_last_toggle_by_user
#     condition: 
#       - condition: template
#         value_template: "{{ trigger.to_state.state == 'on' }}"
#       - condition: template
#         value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
#     action:
#     - service: homeassistant.turn_off
#       target:
#         entity_id: >-
#           {% if trigger.from_state.entity_id == 'switch.system_hourly_mode_breather_v' %}
#           {{ 'switch.system_breather_auto_v', 'switch.system_breather_v_last_toggle_by_user' }}
#           {% elif trigger.from_state.entity_id == 'switch.system_breather_auto_v' %}
#           {{ 'switch.system_hourly_mode_breather_v', 'switch.system_breather_v_last_toggle_by_user' }}
#           {% else %}
#           {{ 'switch.system_hourly_mode_breather_v', 'switch.system_breather_auto_v' }}
#           {% endif %}

# # ##################################
# # Vova - Breather Switches to default
# # ##################################
#   - alias: vova_breather_switches_default
#     id: vova_breather_switches_default
#     trigger:
#       - platform: template
#         value_template: "{{ is_state('switch.system_hourly_mode_breather_v','off') and 
#                             is_state('switch.system_breather_auto_v','off') and
#                             is_state('switch.system_breather_v_last_toggle_by_user','off') }}"
#     condition: 
#       - condition: template
#         value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
#     action:
#     - service: switch.turn_on
#       entity_id: switch.system_breather_auto_v